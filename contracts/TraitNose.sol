// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title TraitNose - Stores DSL Hex data for the "Nose" trait
contract TraitNose {
    // The DSL Hex data is stored as a constant byte array.
    // Replace the hex literal below with the actual output from your conversion script.
    bytes private constant DSL_HEX = hex"d9001600a4011700a401c20002007c204d003100310032002e003400310020003100390032002e003200380073002e00300033002e00300035002e00330034002e003500320063002e00320033002e00330035002e00330035002e00350033002e00340037002e00360037002e00320032002e00320038002e00340034002e0035002e00360035002e00370032002e00320037002e00320038002e0034002e00340031002e0036002e00350037002e00330031002e00320036002e00350037002e00340036002e00390036002e00350036002e00320038002e00300037002e00350038002e00310034002e00390039002d002e00300039002e00310038002d002e0031002e00340037002d002e00320036002e00360035002d002e00360033002e00300039002d002e00310039002e00300037002d002e00320037002e00310038002d002e00390037002e00300033002d002e00310036002e00300032002d002e00310031002e00310038002d002e00390032002e00310036002d002e00380034002e00310033002d002e00380031002e00320033002d0031002e0033002e00310034002d002e00360037002e00320036002d0031002e0031002e00340036002d0031002e00370035002e00310031002d002e00330036002e00310039002d002e0036002e00330033002d002e00380039002e00310034002d002e00320037002e00320036002d002e0035002e00340038002d002e00360032002e00320031002d002e00310032002e0034002d002e00300038002e00350032002d002e00300035002e00330032002e00300037002e00350032002e00320037002e0038002e00350033002e00350031002e00340039002e00370037002e00370033002e00390034002e00380037002e00340036002e00330038002e00380034002e0035003800200031002e00310034002e00370033002e00340038002e00320035002e00370034002e00330032002e00380033002e00330034002e00320032002e00300035002e00340034002e0031002e00370031002e00300036002e00300036002000300020002e00300039002d002e00300032002e00360032002d002e0032002e0033002d002e00310031002e00340036002d002e00310036002e00350033002d002e00310039002e00320035002d002e00300039002e00340037002d002e00310038002e00360039002d002e00320038002e00310033002d002e00300036002e00330032002d002e00310037002e0038002d002e00350032002e00350039002d002e00340033002e00380038002d002e0036003400200031002e00320031002d002e00390037002e00340035002d002e00340035002e00370036002d002e00380037002e00380036002d00310020002e0034002d002e00350034002e00360036002d0031002e00300032002e00370035002d0031002e00310039002e00330032002d002e00360031002e00350034002d0031002e00300032002e00360034002d0031002e00350036002e00300038002d002e00340034002e00300034002d002e00370038002e00300032002d002e00390033002d002e00300032002d002e00310034002d002e00300037002d002e00340032002d002e0032002d002e0036003900610031002e003700200031002e0037002000300020003000200030002d002e00330038002d002e003500320063002d002e00380032002d002e00370039002d0031002e0037002d0031002e00300033002d0031002e0037002d0031002e00300033002d0031002e00360031002d002e00340035002d0032002e00380039002d002e00340035002d0032002e00380039002d002e0035003100200030002d002e00300035002e00370035002d002e0031003100200031002e0036002d002e00300036002e0034002e00300032002e00380031002e0030003500200031002e00330035002e00310037002e00360032002e0031003400200031002e00310038002e0032003700200031002e00380032002e00370035002e00320036002e0032002e00360031002e00340037002e0039003300200031002e00300031002e00310033002e00320032002e00330034002e00350039002e0034003400200031002e00310036002e00300038002e00340035002e00300035002e00380031002e0030003200200031002e00310038002d002e00300033002e00340034002d002e0031002e00380031002d002e0031003700200031002e00300036002d002e00310031002e00350035002d002e00320036002e00390035002d002e0033003700200031002e00320031002d002e00310032002e00320038002d002e00310038002e00330034002d002e0035003600200031002e00300035002d002e00330036002e00360036002d002e00320039002e00350038002d002e00340037002e00380039002d002e00330032002e00350036002d002e00360033002e00390038002d002e0038003100200031002e00320032002d002e00310033002e00310038002d002e00320034002e00330032002d002e0033002e0034002d002e00300037002e00300039002d002e00320033002e00320039002d002e00340033002e00350033002d002e00320033002e00320037002d002e0034002e00340035002d002e00360032002e00360039002d002e00340034002e00340036002d002e00380035002e00380039002d0031002e0034003400200031002e00340031002d002e00330035002e00330031002d002e00380038002e00370037002d0031002e0036003300200031002e00320036002d002e0034002e00320036002d002e0039002e00350036002d0031002e00350031002e00380035002d002e0036002e00320038002d0031002e00300037002e00340034002d0031002e00340039002e00350039002d002e00350031002e00310037002d0031002e00300038002e00330036002d0031002e00370038002e0035002d002e00390034002e00310038002d0031002e00350038002e0033002d0032002e00340031002e00310033002d002e00330038002d002e00300038002d002e00390039002d002e0032002d0031002e00360038002d002e00360034002d002e00310033002d002e00300038002d002e00340036002d002e0033002d002e00380033002d002e00360036002d0031002e00330039002d0031002e00330034002d0032002e00300039002d0033002e0034002d0032002e00300035002d0033002e00340034005a004d003200380037002e00350036002000380030002e00310063002d002e00330038002000310030002e00340039002d00330035002e00380033002000310037002e0038002d00370039002e00310038002000310036002e003300320073002d00370038002e00310038002d00310031002e00310038002d00370037002e0038002d00320031002e00360037002000330035002e00380033002d00310037002e0038002000370039002e00310038002d00310036002e00330032002000370038002e00310038002000310031002e00310038002000370037002e0038002000320031002e00360037006d002d00370039002e00380035002d00310037002e003100320063002d00330035002e00300036002d0031002e00310039002d00360033002e003700200033002e00380035002d00360033002e00390037002000310031002e00320037007300320037002e00390033002000310034002e0034002000360032002e00390039002000310035002e0036006300330035002e0030003600200031002e00310039002000360033002e0037002d0033002e00380035002000360033002e00390037002d00310031002e003200370073002d00320037002e00390033002d00310034002e0034002d00360032002e00390039002d00310035002e0036001c000c20660069006c006c003a00230066006600300030003300640082009900"; // example placeholder

    /// @notice Returns the DSL Hex data for this trait.
    /// Uses inline assembly to efficiently load the data.
    function getDSLHex() external pure returns (bytes memory data) {
        // Copy the constant into a memory variable.
        bytes memory dsl = DSL_HEX;
        assembly {
            // Get the free memory pointer
            data := mload(0x40)
            // Read the length of dsl from memory
            let len := mload(dsl)
            mstore(data, len)
            // Calculate pointer to dsl data (skip the length slot)
            let sourcePtr := add(dsl, 32)
            // Destination pointer (after the length slot in data)
            let destPtr := add(data, 32)
            // Copy dsl data into data, 32 bytes at a time.
            for { let i := 0 } lt(i, len) { i := add(i, 32) } {
                mstore(add(destPtr, i), mload(add(sourcePtr, i)))
            }
            // Update free memory pointer
            mstore(0x40, add(destPtr, len))
        }
    }
}